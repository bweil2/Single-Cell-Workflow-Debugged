 library(R.utils)
 x<-gunzip("GSE61533_HTSEQ_count_results.xls.gz", remove=FALSE, overwrite=TRUE) 
 library(gdata)
 all.counts <- read.xls(x, sheet=1, header=TRUE, row.names=1)
 source("https://bioconductor.org/biocLite.R")
 library(scater)
 biocLite("SingleCellExperiment")
 sce <- SingleCellExperiment(assays = list(counts = as.matrix(all.counts)))
 dim(sce)
 is.spike <- grepl("^ERCC", rownames(sce))
 is.mito <- grepl("^mt-", rownames(sce))
 sce <- calculateQCMetrics(sce, feature_controls=list(ERCC=is.spike, Mt=is.mito))
 head(colnames(colData(sce)))
 library(scran)
 isSpike(sce, "ERCC") <- grepl("^ERCC-", rownames(sce))
 par(mfrow=c(1,2))
 hist(sce$total_counts/1e6, xlab="Library sizes (millions)", main="",
     breaks=20, col="grey80", ylab="Number of cells")
 hist(sce$total_features, xlab="Number of expressed genes", main="",
     breaks=20, col="grey80", ylab="Number of cells")
libsize.drop <- isOutlier(sce$total_counts, nmads=3, type="lower", log=TRUE)
feature.drop <- isOutlier(sce$total_features, nmads=3, type="lower", log=TRUE)
 par(mfrow=c(1,2))
 hist(sce$pct_counts_Mt, xlab="Mitochondrial proportion (%)",
     ylab="Number of cells", breaks=20, main="", col="grey80")
 hist(sce$pct_counts_ERCC, xlab="ERCC proportion (%)",
      ylab="Number of cells", breaks=20, main="", col="grey80")
mito.drop <- isOutlier(sce$pct_counts_Mt, nmads=3, type="higher")
 spike.drop <- isOutlier(sce$pct_counts_ERCC, nmads=3, type="higher")
 sce <- sce[,!(libsize.drop | feature.drop | mito.drop | spike.drop)]
 data.frame(ByLibSize=sum(libsize.drop), ByFeature=sum(feature.drop),ByMito=sum(mito.drop), BySpike=sum(spike.drop), Remaining=ncol(sce))
fontsize <- theme(axis.text=element_text(size=12), axis.title=element_text(size=16))
example_sce <- runPCA(sce, use_coldata = TRUE,detect_outliers = FALSE)
 plotReducedDim(example_sce, use_dimred="PCA_coldata")
 mm.pairs <- readRDS(system.file("exdata", "mouse_cycle_markers.rds", package="scran"))
 library(org.Mm.eg.db)
 anno <- select(org.Mm.eg.db, keys=rownames(sce), keytype="SYMBOL", column="ENSEMBL")
 ensembl <- anno$ENSEMBL[match(rownames(sce), anno$SYMBOL)]
 assignments <- cyclone(sce, mm.pairs, gene.names=ensembl)
 plot(assignments$score$G1, assignments$score$G2M, xlab="G1 score", ylab="G2/M score", pch=16)
sce <- sce[,assignments$phases=="G1"]
ave.counts <- rowMeans(counts(sce))
keep <- ave.counts >= 1
sum(keep)
hist(log10(ave.counts), breaks=100, main="", col="grey80", xlab=expression(Log[10]~"average count"))
abline(v=log10(1), col="blue", lwd=2, lty=2)
plotQC(sce, type = "highest-expression", n=50) + fontsize
numcells <- nexprs(sce, byrow=TRUE)
alt.keep <- numcells >= 10
sum(alt.keep)
smoothScatter(log10(ave.counts), numcells, xlab=expression(Log[10]~"average count"),
     ylab="Number of expressing cells")
    is.ercc <- isSpike(sce, type="ERCC")
    points(log10(ave.counts[is.ercc]), numcells[is.ercc], col="red", pch=16, cex=0.5)
 sce <- sce[keep,]
 sce <- computeSumFactors(sce, sizes=c(20, 40, 60, 80))
 summary(sizeFactors(sce))
 plot(sizeFactors(sce), sce$total_counts/1e6, log="xy",ylab="Library size (millions)", xlab="Size factor")
 sce <- computeSpikeFactors(sce, type="ERCC", general.use=FALSE)
 sce <- normalize(sce)
 plotExplanatoryVariables(sce, variables=c("total_features_by_counts_ERCC", "log10_total_features_by_counts_ERCC")) + fontsize
 var.fit <- trendVar(sce, method="loess", use.spikes=FALSE, span=0.2)
var.out <- decomposeVar(sce, var.fit)
 plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log-expression",
     ylab="Variance of log-expression")
     o <- order(var.out$mean)
     lines(var.out$mean[o], var.out$tech[o], col="dodgerblue", lwd=2)
     cur.spike <- isSpike(sce)
     points(var.out$mean[cur.spike], var.out$total[cur.spike], col="red", pch=16)
hvg.out <- var.out[which(var.out$FDR <= 0.05 & var.out$bio >= 0.5),]
 hvg.out <- hvg.out[order(hvg.out$bio, decreasing=TRUE),]
 nrow(hvg.out)
 write.table(file="hsc_hvg.tsv", hvg.out, sep="\t", quote=FALSE, col.names=NA)
 head(hvg.out)
 plotExpression(sce, rownames(hvg.out)[1:10]) + fontsize
 set.seed(100)
 var.cor <- correlatePairs(sce, subset.row=rownames(hvg.out))
 write.table(file="hsc_cor.tsv", var.cor, sep="\t", quote=FALSE, row.names=FALSE)
 head(var.cor)
 sig.cor <- var.cor$FDR <= 0.05
 summary(sig.cor)
library(RBGL)
 g <- ftM2graphNEL(cbind(var.cor$gene1, var.cor$gene2)[sig.cor,],W=NULL, V=NULL, edgemode="undirected")
 cl <- highlyConnSG(g)$clusters
 cl <- cl[order(lengths(cl), decreasing=TRUE)]
 head(cl)
 chosen <- unique(c(var.cor$gene1[sig.cor], var.cor$gene2[sig.cor]))
 norm.exprs <- exprs(sce)[chosen,,drop=FALSE]
 heat.vals <- norm.exprs - rowMeans(norm.exprs)
 library(gplots)
heat.out <- heatmap.2(heat.vals, col=bluered, symbreak=TRUE, cexRow=0.6)
 plotPCA(sce, exprs_values="counts", colour_by="total_features",feature_set=chosen) + fontsize
 set.seed(100)
 out5 <- plotTSNE(sce, exprs_values="counts", perplexity=5, colour_by="total_features", feature_set=chosen) + fontsize + ggtitle("Perplexity = 5")
 out10 <- plotTSNE(sce, exprs_values="counts", perplexity=10, colour_by="total_features", feature_set=chosen) + fontsize + ggtitle("Perplexity = 10")
 out20 <- plotTSNE(sce, exprs_values="counts", perplexity=20, colour_by="total_features", feature_set=chosen) + fontsize + ggtitle("Perplexity = 20")
 multiplot(out5, out10, out20, cols=3)
 saveRDS(file="hsc_data.rds", sce)
 readFormat <- function(infile) {
     # First column is empty.
     metadata <- read.delim(infile, stringsAsFactors=FALSE, header=FALSE, nrow=10)[,-1]
     rownames(metadata) <- metadata[,1]
     metadata <- metadata[,-1]
     metadata <- as.data.frame(t(metadata))
     # First column after row names is some useless filler.
     counts <- read.delim(infile, stringsAsFactors=FALSE, header=FALSE, row.names=1, skip=11)[,-1]
     counts <- as.matrix(counts)
     return(list(metadata=metadata, counts=counts))}
endo.data <- readFormat("expression_mRNA_17-Aug-2014.txt")
 spike.data <- readFormat("expression_spikes_17-Aug-2014.txt")
 mito.data <- readFormat("expression_mito_17-Aug-2014.txt")
 m <- match(endo.data$metadata$cell_id, mito.data$metadata$cell_id)
 mito.data$metadata <- mito.data$metadata[m,]
 mito.data$counts <- mito.data$counts[,m]
 all.counts <- rbind(endo.data$counts, mito.data$counts, spike.data$counts)
 metadata <- AnnotatedDataFrame(endo.data$metadata)
 metaframe<-as(metadata, "data.frame")
 sce <- SingleCellExperiment(list(counts=all.counts), colData=metaframe)
 dim(sce)
 nrows <- c(nrow(endo.data$counts), nrow(mito.data$counts), nrow(spike.data$counts))
 is.spike <- rep(c(FALSE, FALSE, TRUE), nrows)
 is.mito <- rep(c(FALSE, TRUE, FALSE), nrows)
 sce <- calculateQCMetrics(sce, feature_controls=list(Spike=is.spike, Mt=is.mito))
 isSpike(sce, "Spike") <- is.spike
 par(mfrow=c(1,2))
hist(sce$total_counts/1e3, xlab="Library sizes (thousands)", main="",
     breaks=20, col="grey80", ylab="Number of cells")
hist(sce$total_features, xlab="Number of expressed genes", main="",
     breaks=20, col="grey80", ylab="Number of cells")
 par(mfrow=c(1,2))
 hist(sce$pct_counts_Mt, xlab="Mitochondrial proportion (%)",
     ylab="Number of cells", breaks=20, main="", col="grey80")
 hist(sce$pct_counts_Spike, xlab="ERCC proportion (%)",
     ylab="Number of cells", breaks=20, main="", col="grey80")
 libsize.drop <- isOutlier(sce$total_counts, nmads=3, type="lower", log=TRUE)
 feature.drop <- isOutlier(sce$total_features, nmads=3, type="lower", log=TRUE)
 mito.drop <- isOutlier(sce$pct_counts_Mt, nmads=3, type="higher")
 spike.drop <- isOutlier(sce$pct_counts_Spike, nmads=3, type="higher")
 sce <- sce[,!(libsize.drop | feature.drop | spike.drop | mito.drop)]
 data.frame(ByLibSize=sum(libsize.drop), ByFeature=sum(feature.drop), ByMito=sum(mito.drop), BySpike=sum(spike.drop), Remaining=ncol(sce))
 anno <- select(org.Mm.eg.db, keys=rownames(sce), keytype="SYMBOL", column="ENSEMBL")
 ensembl <- anno$ENSEMBL[match(rownames(sce), anno$SYMBOL)]
 assignments <- cyclone(sce, mm.pairs, gene.names=ensembl)
 plot(assignments$score$G1, assignments$score$G2M, xlab="G1 score", ylab="G2/M score", pch=16)
 ave.counts <- rowMeans(counts(sce))
 keep <- rowMeans(counts(sce)) >= 0.2
 hist(log10(ave.counts), breaks=100, main="", col="grey",
     xlab=expression(Log[10]~"average count"))
abline(v=log10(0.2), col="blue", lwd=2, lty=2)
sce <- sce[keep,]
 nrow(sce)
 sce <- sce[!rowData(sce)$is_feature_control_Mt,]
 clusters <- quickCluster(sce)
 sce <- computeSumFactors(sce, cluster=clusters)
 plot(sizeFactors(sce), sce$total_counts/1e3, log="xy",
    ylab="Library size (thousands)", xlab="Size factor")
 sce <- computeSpikeFactors(sce, type="Spike", general.use=FALSE)
 sce <- normalize(sce)
 plotExplanatoryVariables(sce, variables=c("total_features_by_counts_Spike",
  "log10_total_features_by_counts_Spike", "sex", "tissue", "age")) + fontsize
 design <- model.matrix(~sce$sex)
 var.fit <- trendVar(sce, method="loess", design=design, span=0.4)
 var.out <- decomposeVar(sce, var.fit)
 plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log-expression",
    ylab="Variance of log-expression")
    points(var.fit$mean, var.fit$var, col="red", pch=16)
    o <- order(var.out$mean)
    lines(var.out$mean[o], var.out$tech[o], col="red", lwd=2)
 hvg.out <- var.out[which(var.out$FDR <= 0.05 & var.out$bio >= 0.5),]
 hvg.out <- hvg.out[order(hvg.out$bio, decreasing=TRUE),]
 nrow(hvg.out)
 write.table(file="brain_hvg.tsv", hvg.out, sep="\t", quote=FALSE, col.names=NA)
 head(hvg.out)
 plotExpression(sce, rownames(hvg.out)[1:10], alpha=0.05, jitter="jitter") + fontsize
 set.seed(100)
 var.cor <- correlatePairs(sce, design=design, subset.row=rownames(hvg.out)[1:500])
 write.table(file="brain_cor.tsv", var.cor, sep="\t", quote=FALSE, row.names=FALSE)
 head(var.cor)
 sig.cor <- var.cor$FDR <= 0.05
 sum(sig.cor)
 library(limma)
 adj.exprs <- exprs(sce)
 adj.exprs <- removeBatchEffect(adj.exprs, batch=sce$sex)
 norm_exprs(sce) <- adj.exprs
 chosen <- unique(c(var.cor$gene1[sig.cor], var.cor$gene2[sig.cor]))
 top.hvg <- rownames(hvg.out)[1]
 tsne1 <- plotTSNE(sce, exprs_values="norm_exprs", colour_by=top.hvg,
    perplexity=10, rand_seed=100, feature_set=chosen) + fontsize
 tsne2 <- plotTSNE(sce, exprs_values="norm_exprs", colour_by="Mog",
    perplexity=10, rand_seed=100, feature_set=chosen) + fontsize
 multiplot(tsne1, tsne2, cols=2)
 pca1 <- plotPCA(sce, exprs_values="norm_exprs", colour_by=top.hvg) + fontsize
 pca2 <- plotPCA(sce, exprs_values="norm_exprs", colour_by="Mog") + fontsize
 multiplot(pca1, pca2, cols=2)
 chosen.exprs <- norm_exprs(sce)[chosen,]
 my.dist <- dist(t(chosen.exprs))
 my.tree <- hclust(my.dist, method="ward.D2")
 library(dynamicTreeCut)
 my.clusters <- unname(cutreeDynamic(my.tree, distM=as.matrix(my.dist), verbose=0))
 heat.vals <- chosen.exprs - rowMeans(chosen.exprs)
 clust.col <- rainbow(max(my.clusters))
 heatmap.2(heat.vals, col=bluered, symbreak=TRUE, cexRow=0.3,ColSideColors=clust.col[my.clusters], Colv=as.dendrogram(my.tree))
pdf("brain_heat.pdf", width=20, height=40)
    heatmap.2(heat.vals, col=bluered, symbreak=TRUE, trace=’none’, cexRow=0.3,
    ColSideColors=clust.col[my.clusters], Colv=as.dendrogram(my.tree))
    dev.off()
 cluster <- factor(my.clusters)
 de.design <- model.matrix(~0 + cluster + sce$sex)
 head(colnames(de.design))
 library(edgeR)
 y <- convertTo(sce, type="edgeR")
 y <- estimateDisp(y, de.design)
 fit <- glmFit(y, de.design)
 summary(y$tagwise.dispersion)
 result.logFC <- result.PValue <- list()
 chosen.clust <- which(levels(cluster)=="1") # character, as ’cluster’ is a factor.
 for (clust in seq_len(nlevels(cluster))) {
    if (clust==chosen.clust) { next }
    contrast <- numeric(ncol(de.design))
    contrast[chosen.clust] <- 1
    contrast[clust] <- -1
    res <- glmLRT(fit, contrast=contrast)
    con.name <- paste0("vs.", levels(cluster)[clust])
    result.logFC[[con.name]] <- res$table$logFC
    result.PValue[[con.name]] <- res$table$PValue}
 collected.ranks <- lapply(result.PValue, rank, ties="first")
 min.rank <- do.call(pmin, collected.ranks)
 marker.set <- data.frame(Top=min.rank, Gene=rownames(y),
    logFC=do.call(cbind, result.logFC), stringsAsFactors=FALSE)
 marker.set <- marker.set[order(marker.set$Top),]
 head(marker.set, 10)
 write.table(marker.set, file="brain_marker_1.tsv", sep="\t", quote=FALSE, col.names=NA)
 top.markers <- marker.set$Gene[marker.set$Top <= 10]
 top.exprs <- norm_exprs(sce)[top.markers,,drop=FALSE]
 heat.vals <- top.exprs - rowMeans(top.exprs)
 heatmap.2(heat.vals, col=bluered, symbreak=TRUE, cexRow=0.6,
    ColSideColors=clust.col[my.clusters], Colv=as.dendrogram(my.tree))
    legend("bottomleft", col=clust.col, legend=sort(unique(my.clusters)), pch=16)
 saveRDS(file="brain_data.rds", sce)
 counts <- read.table("GSE29087_L139_expression_tab.txt.gz",
	colClasses=c(list("character", NULL, NULL, NULL, NULL, NULL, NULL), rep("integer", 96)), skip=6, sep="\t", row.names=1)
 sce <- SingleCellExperiment(assays = list(counts = as.matrix(counts)))
 sce$grouping <- rep(c("mESC", "MEF", "Neg"), c(48, 44, 4))
 sce <- sce[,sce$grouping!="Neg"] # Removing negative control wells.
 sce <- calculateQCMetrics(sce, feature_controls=list(spike=grep("SPIKE", 
      rownames(counts))))
 isSpike(sce, "Spike") <- is.spike
 sce <- computeSpikeFactors(sce, general.use=TRUE)
 sce <- normalize(sce)
 colours <- c(mESC="red", MEF="grey")
 deconv.sf <- computeSumFactors(sce, sf.out=TRUE, cluster=sce$grouping, sizes=1:4*10)
 plot(sizeFactors(sce), deconv.sf, col=colours[sce$grouping], pch=16, log="xy",
    xlab="Size factor (spike-in)", ylab="Size factor (deconvolution)")
    legend("bottomleft", col=colours, legend=names(colours), pch=16)
 library(openxlsx)
 incoming <- read.xlsx("nbt.3102-S7.xlsx", sheet=1, rowNames=TRUE)
 incoming <- incoming[,!duplicated(colnames(incoming))] # Remove duplicated genes.
 incoming<-t(incoming)
 sce <- SingleCellExperiment(assays = list(logcounts = as.matrix(incoming)))
 anno <- select(org.Mm.eg.db, keys=rownames(sce), keytype="SYMBOL", column="ENSEMBL")
 ensembl <- anno$ENSEMBL[match(rownames(sce), anno$SYMBOL)]
 assignments <- cyclone(sce, mm.pairs, gene.names=ensembl, assay.type="logcounts")
 plot(assignments$score$G1, assignments$score$G2M, xlab="G1 score", ylab="G2/M score", 
    pch=16)
 design <- model.matrix(~ G1 + G2M, assignments$score)
 fit.block <- trendVar(sce, use.spikes=NA, method="loess", design=design)
 dec.block <- decomposeVar(sce, fit.block)
 fit <- trendVar(sce, use.spikes=NA, method="loess")
 dec <- decomposeVar(sce, fit)
 top.hvgs <- which(dec$FDR <= 0.05 & dec$bio >= 0.5)
 sce$G1score <- assignments$score$G1
 sce$G2Mscore <- assignments$score$G2M
 out <- plotPCA(sce, feature_set=top.hvgs, colour_by="G1score", size_by="G2Mscore") +
    fontsize + ggtitle("Before removal")
 top.hvgs2 <- which(dec.block$FDR <= 0.05 & dec.block$bio >= 0.5)
 norm_exprs(sce) <- removeBatchEffect(exprs(sce), covariates=assignments$score[,c("G1","G2M")])
 out2 <- plotPCA(sce, exprs_values="norm_exprs", feature_set=top.hvgs2, 
	colour_by="G1score",
    	size_by="G2Mscore") + fontsize + ggtitle("After removal")
 multiplot(out, out2, cols=2)
 plotDiffusionMap(sce, exprs_values="norm_exprs", colour_by="Gata3") + fontsize
 incoming <- read.table("counttable_es.csv", header=TRUE, row.names=1)
 my.ids <- rownames(incoming)
 anno <- select(org.Mm.eg.db, keys=my.ids, keytype="ENSEMBL", column="SYMBOL")
 anno <- anno[match(my.ids, anno$ENSEMBL),]
 head(anno)
 library(TxDb.Mmusculus.UCSC.mm10.ensGene)
 location <- select(TxDb.Mmusculus.UCSC.mm10.ensGene, keys=my.ids,
     column="CDSCHROM", keytype="GENEID")
 location <- location[match(my.ids, location$GENEID),]
 is.mito <- location$CDSCHROM == "chrM" & !is.na(location$CDSCHROM)
 sum(is.mito)
 is.spike <- grepl("^ERCC", my.ids)
 sum(is.spike)
 anno <- anno[,-1,drop=FALSE]
 rownames(anno) <- my.ids
 sce <- SingleCellExperiment(assays = list(counts = as.matrix(incoming)))
 sce <- calculateQCMetrics(sce, feature_controls=list(ERCC=is.spike))
 isSpike(sce, "ERCC") <- grepl("^ERCC-", rownames(sce))
 sce <- sce[grepl("ENSMUS", rownames(sce)) | isSpike(sce),]
 dim(sce)
 sessionInfo()
